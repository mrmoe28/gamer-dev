generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  displayName      String?
  bio              String?
  location         String?
  website          String?
  customImage      String?
  skills           String?
  socialLinks      String?
  lookingForTeam   Boolean          @default(false)
  availabilityStatus String         @default("available") // available, busy, open_to_offers
  preferredRoles   String?          // JSON array
  experience       String           @default("intermediate") // beginner, intermediate, expert
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accounts         Account[]
  sessions         Session[]
  ownedProjects    Project[]
  projectMemberships ProjectMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id              String          @id @default(cuid())
  name            String
  slug            String          @unique
  description     String?
  longDescription String?
  genre           String
  stage           String
  platforms       String?         // JSON array
  engine          String?
  coverImage      String?
  screenshots     String?         // JSON array
  videoUrl        String?
  teamSize        Int             @default(1)
  lookingForTeam  Boolean         @default(false)
  rolesNeeded     String?         // JSON array
  tags            String?         // JSON array
  visibility      String          @default("public")
  ownerId         String
  owner           User            @relation(fields: [ownerId], references: [id])
  members         ProjectMember[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      String
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  joinedAt  DateTime @default(now())
  
  @@unique([userId, projectId])
}
